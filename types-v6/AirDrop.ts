/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace AirDrop {
  export type ParamStruct = {
    to: AddressLike;
    amount: BigNumberish;
    debt: BigNumberish;
  };

  export type ParamStructOutput = [to: string, amount: bigint, debt: bigint] & {
    to: string;
    amount: bigint;
    debt: bigint;
  };
}

export interface AirDropInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "airDropToken"
      | "gameToken"
      | "mintGameToken"
      | "owner"
      | "renounceOwnership"
      | "setGameToken"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AirDropToken"
      | "MintGameToken"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "airDropToken",
    values: [AddressLike, AirDrop.ParamStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "gameToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintGameToken",
    values: [AirDrop.ParamStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGameToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "airDropToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintGameToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AirDropTokenEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintGameTokenEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    debt: BigNumberish
  ];
  export type OutputTuple = [to: string, amount: bigint, debt: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
    debt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AirDrop extends BaseContract {
  connect(runner?: ContractRunner | null): AirDrop;
  waitForDeployment(): Promise<this>;

  interface: AirDropInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  airDropToken: TypedContractMethod<
    [token: AddressLike, params: AirDrop.ParamStruct[]],
    [void],
    "nonpayable"
  >;

  gameToken: TypedContractMethod<[], [string], "view">;

  mintGameToken: TypedContractMethod<
    [params: AirDrop.ParamStruct[]],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setGameToken: TypedContractMethod<
    [gameToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "airDropToken"
  ): TypedContractMethod<
    [token: AddressLike, params: AirDrop.ParamStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gameToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintGameToken"
  ): TypedContractMethod<[params: AirDrop.ParamStruct[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGameToken"
  ): TypedContractMethod<[gameToken_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AirDropToken"
  ): TypedContractEvent<
    AirDropTokenEvent.InputTuple,
    AirDropTokenEvent.OutputTuple,
    AirDropTokenEvent.OutputObject
  >;
  getEvent(
    key: "MintGameToken"
  ): TypedContractEvent<
    MintGameTokenEvent.InputTuple,
    MintGameTokenEvent.OutputTuple,
    MintGameTokenEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AirDropToken(address,address,uint256)": TypedContractEvent<
      AirDropTokenEvent.InputTuple,
      AirDropTokenEvent.OutputTuple,
      AirDropTokenEvent.OutputObject
    >;
    AirDropToken: TypedContractEvent<
      AirDropTokenEvent.InputTuple,
      AirDropTokenEvent.OutputTuple,
      AirDropTokenEvent.OutputObject
    >;

    "MintGameToken(address,uint256,uint256)": TypedContractEvent<
      MintGameTokenEvent.InputTuple,
      MintGameTokenEvent.OutputTuple,
      MintGameTokenEvent.OutputObject
    >;
    MintGameToken: TypedContractEvent<
      MintGameTokenEvent.InputTuple,
      MintGameTokenEvent.OutputTuple,
      MintGameTokenEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
