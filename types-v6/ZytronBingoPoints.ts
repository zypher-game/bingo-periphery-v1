/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ZytronBingoPoints {
  export type SwapInfoStruct = { amount: BigNumberish; discount: BigNumberish };

  export type SwapInfoStructOutput = [amount: bigint, discount: bigint] & {
    amount: bigint;
    discount: bigint;
  };
}

export interface ZytronBingoPointsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONSECUTIVE_TIMES"
      | "DEFAULT_ADMIN_ROLE"
      | "dayClaimed"
      | "freeClaim"
      | "freeClaimEnable"
      | "gameToken"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "nativeSwap"
      | "nativeWithdrawTo"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeRole"
      | "setClaimConf"
      | "setFreeClaimEnable"
      | "setGameToken"
      | "setSignInClaimEnable"
      | "setSwapInfo"
      | "setSwapRatio"
      | "signInClaim"
      | "signInClaimEnable"
      | "signInInfos"
      | "supportsInterface"
      | "swapInfos"
      | "swapRatios"
      | "swaps"
      | "totalSwaps"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Claim"
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Swap"
      | "Upgraded"
      | "WithdrawTo"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONSECUTIVE_TIMES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dayClaimed",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "freeClaim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "freeClaimEnable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeSwap",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeWithdrawTo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimConf",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreeClaimEnable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSignInClaimEnable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapInfo",
    values: [BigNumberish, ZytronBingoPoints.SwapInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapRatio",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signInClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signInClaimEnable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signInInfos",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRatios",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swaps",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSwaps",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONSECUTIVE_TIMES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dayClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freeClaimEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nativeSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeWithdrawTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimConf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreeClaimEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSignInClaimEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signInClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signInClaimEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signInInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRatios", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swaps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSwaps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimEvent {
  export type InputTuple = [
    operator: AddressLike,
    claimType: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    claimType: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    operator: string;
    claimType: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    operator: AddressLike,
    token: AddressLike,
    nativeAmount: BigNumberish,
    pointsAmount: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    token: string,
    nativeAmount: bigint,
    pointsAmount: bigint
  ];
  export interface OutputObject {
    operator: string;
    token: string;
    nativeAmount: bigint;
    pointsAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawToEvent {
  export type InputTuple = [
    operator: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [operator: string, to: string, amount: bigint];
  export interface OutputObject {
    operator: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZytronBingoPoints extends BaseContract {
  connect(runner?: ContractRunner | null): ZytronBingoPoints;
  waitForDeployment(): Promise<this>;

  interface: ZytronBingoPointsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONSECUTIVE_TIMES: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  dayClaimed: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [boolean],
    "view"
  >;

  freeClaim: TypedContractMethod<[], [void], "nonpayable">;

  freeClaimEnable: TypedContractMethod<[], [boolean], "view">;

  gameToken: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [gameToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  nativeSwap: TypedContractMethod<
    [lobby_: AddressLike, infoIndex_: BigNumberish],
    [void],
    "payable"
  >;

  nativeWithdrawTo: TypedContractMethod<
    [to_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setClaimConf: TypedContractMethod<
    [claimType: BigNumberish, claimConf_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setFreeClaimEnable: TypedContractMethod<
    [freeClaimEnable_: boolean],
    [void],
    "nonpayable"
  >;

  setGameToken: TypedContractMethod<
    [gameToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  setSignInClaimEnable: TypedContractMethod<
    [signInClaimEnable_: boolean],
    [void],
    "nonpayable"
  >;

  setSwapInfo: TypedContractMethod<
    [lastLength: BigNumberish, swapInfos_: ZytronBingoPoints.SwapInfoStruct[]],
    [void],
    "nonpayable"
  >;

  setSwapRatio: TypedContractMethod<
    [token_: AddressLike, decimals_: BigNumberish, ratio_: BigNumberish],
    [void],
    "nonpayable"
  >;

  signInClaim: TypedContractMethod<[], [void], "nonpayable">;

  signInClaimEnable: TypedContractMethod<[], [boolean], "view">;

  signInInfos: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, string] & { signCount: bigint; lastSignIn: string }],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  swapInfos: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { amount: bigint; discount: bigint }],
    "view"
  >;

  swapRatios: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { decimals: bigint; ratio: bigint }],
    "view"
  >;

  swaps: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: AddressLike],
    [bigint],
    "view"
  >;

  totalSwaps: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONSECUTIVE_TIMES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dayClaimed"
  ): TypedContractMethod<[arg0: string, arg1: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "freeClaim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "freeClaimEnable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "gameToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[gameToken_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nativeSwap"
  ): TypedContractMethod<
    [lobby_: AddressLike, infoIndex_: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "nativeWithdrawTo"
  ): TypedContractMethod<
    [to_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setClaimConf"
  ): TypedContractMethod<
    [claimType: BigNumberish, claimConf_: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFreeClaimEnable"
  ): TypedContractMethod<[freeClaimEnable_: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGameToken"
  ): TypedContractMethod<[gameToken_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSignInClaimEnable"
  ): TypedContractMethod<[signInClaimEnable_: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwapInfo"
  ): TypedContractMethod<
    [lastLength: BigNumberish, swapInfos_: ZytronBingoPoints.SwapInfoStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapRatio"
  ): TypedContractMethod<
    [token_: AddressLike, decimals_: BigNumberish, ratio_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signInClaim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "signInClaimEnable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "signInInfos"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, string] & { signCount: bigint; lastSignIn: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapInfos"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { amount: bigint; discount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapRatios"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { decimals: bigint; ratio: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "swaps"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSwaps"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawTo"
  ): TypedContractEvent<
    WithdrawToEvent.InputTuple,
    WithdrawToEvent.OutputTuple,
    WithdrawToEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Claim(address,uint8,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Swap(address,address,uint256,uint256)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WithdrawTo(address,address,uint256)": TypedContractEvent<
      WithdrawToEvent.InputTuple,
      WithdrawToEvent.OutputTuple,
      WithdrawToEvent.OutputObject
    >;
    WithdrawTo: TypedContractEvent<
      WithdrawToEvent.InputTuple,
      WithdrawToEvent.OutputTuple,
      WithdrawToEvent.OutputObject
    >;
  };
}
